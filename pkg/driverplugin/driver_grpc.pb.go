// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package driverplugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverPluginClient is the client API for DriverPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverPluginClient interface {
	// connect to iotedge
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Response, error)
	// register device service
	DriverRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
	// fetch device meta service
	FetchDeviceMeta(ctx context.Context, in *DeviceMetaFetchRequest, opts ...grpc.CallOption) (*DeviceMetas, error)
	// report device data
	TransformData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformDataClient, error)
	// report device status
	SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Response, error)
	// exec device commands
	ExecCommands(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_ExecCommandsClient, error)
	// life cycle control of a device
	DeviceLifeControl(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_DeviceLifeControlClient, error)
	// Transform report message
	TransformRawData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformRawDataClient, error)
	// Batch transform report message
	TransformBatchRawData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformBatchRawDataClient, error)
}

type driverPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverPluginClient(cc grpc.ClientConnInterface) DriverPluginClient {
	return &driverPluginClient{cc}
}

func (c *driverPluginClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driverplugin.DriverPlugin/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) DriverRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driverplugin.DriverPlugin/DriverRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) FetchDeviceMeta(ctx context.Context, in *DeviceMetaFetchRequest, opts ...grpc.CallOption) (*DeviceMetas, error) {
	out := new(DeviceMetas)
	err := c.cc.Invoke(ctx, "/driverplugin.DriverPlugin/FetchDeviceMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) TransformData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[0], "/driverplugin.DriverPlugin/TransformData", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverPluginTransformDataClient{stream}
	return x, nil
}

type DriverPlugin_TransformDataClient interface {
	Send(*Data) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type driverPluginTransformDataClient struct {
	grpc.ClientStream
}

func (x *driverPluginTransformDataClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverPluginTransformDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverPluginClient) SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driverplugin.DriverPlugin/SendHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) ExecCommands(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_ExecCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[1], "/driverplugin.DriverPlugin/ExecCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverPluginExecCommandsClient{stream}
	return x, nil
}

type DriverPlugin_ExecCommandsClient interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type driverPluginExecCommandsClient struct {
	grpc.ClientStream
}

func (x *driverPluginExecCommandsClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverPluginExecCommandsClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverPluginClient) DeviceLifeControl(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_DeviceLifeControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[2], "/driverplugin.DriverPlugin/DeviceLifeControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverPluginDeviceLifeControlClient{stream}
	return x, nil
}

type DriverPlugin_DeviceLifeControlClient interface {
	Send(*Response) error
	Recv() (*DeviceLifeControlRequest, error)
	grpc.ClientStream
}

type driverPluginDeviceLifeControlClient struct {
	grpc.ClientStream
}

func (x *driverPluginDeviceLifeControlClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverPluginDeviceLifeControlClient) Recv() (*DeviceLifeControlRequest, error) {
	m := new(DeviceLifeControlRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverPluginClient) TransformRawData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformRawDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[3], "/driverplugin.DriverPlugin/TransformRawData", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverPluginTransformRawDataClient{stream}
	return x, nil
}

type DriverPlugin_TransformRawDataClient interface {
	Send(*ReportMessage) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type driverPluginTransformRawDataClient struct {
	grpc.ClientStream
}

func (x *driverPluginTransformRawDataClient) Send(m *ReportMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverPluginTransformRawDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverPluginClient) TransformBatchRawData(ctx context.Context, opts ...grpc.CallOption) (DriverPlugin_TransformBatchRawDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[4], "/driverplugin.DriverPlugin/TransformBatchRawData", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverPluginTransformBatchRawDataClient{stream}
	return x, nil
}

type DriverPlugin_TransformBatchRawDataClient interface {
	Send(*ReportMessages) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type driverPluginTransformBatchRawDataClient struct {
	grpc.ClientStream
}

func (x *driverPluginTransformBatchRawDataClient) Send(m *ReportMessages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverPluginTransformBatchRawDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverPluginServer is the server API for DriverPlugin service.
// All implementations must embed UnimplementedDriverPluginServer
// for forward compatibility
type DriverPluginServer interface {
	// connect to iotedge
	Connect(context.Context, *ConnectRequest) (*Response, error)
	// register device service
	DriverRegister(context.Context, *RegisterRequest) (*Response, error)
	// fetch device meta service
	FetchDeviceMeta(context.Context, *DeviceMetaFetchRequest) (*DeviceMetas, error)
	// report device data
	TransformData(DriverPlugin_TransformDataServer) error
	// report device status
	SendHeartBeat(context.Context, *HeartBeat) (*Response, error)
	// exec device commands
	ExecCommands(DriverPlugin_ExecCommandsServer) error
	// life cycle control of a device
	DeviceLifeControl(DriverPlugin_DeviceLifeControlServer) error
	// Transform report message
	TransformRawData(DriverPlugin_TransformRawDataServer) error
	// Batch transform report message
	TransformBatchRawData(DriverPlugin_TransformBatchRawDataServer) error
	mustEmbedUnimplementedDriverPluginServer()
}

// UnimplementedDriverPluginServer must be embedded to have forward compatible implementations.
type UnimplementedDriverPluginServer struct {
}

func (UnimplementedDriverPluginServer) Connect(context.Context, *ConnectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDriverPluginServer) DriverRegister(context.Context, *RegisterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverRegister not implemented")
}
func (UnimplementedDriverPluginServer) FetchDeviceMeta(context.Context, *DeviceMetaFetchRequest) (*DeviceMetas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDeviceMeta not implemented")
}
func (UnimplementedDriverPluginServer) TransformData(DriverPlugin_TransformDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformData not implemented")
}
func (UnimplementedDriverPluginServer) SendHeartBeat(context.Context, *HeartBeat) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartBeat not implemented")
}
func (UnimplementedDriverPluginServer) ExecCommands(DriverPlugin_ExecCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecCommands not implemented")
}
func (UnimplementedDriverPluginServer) DeviceLifeControl(DriverPlugin_DeviceLifeControlServer) error {
	return status.Errorf(codes.Unimplemented, "method DeviceLifeControl not implemented")
}
func (UnimplementedDriverPluginServer) TransformRawData(DriverPlugin_TransformRawDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformRawData not implemented")
}
func (UnimplementedDriverPluginServer) TransformBatchRawData(DriverPlugin_TransformBatchRawDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformBatchRawData not implemented")
}
func (UnimplementedDriverPluginServer) mustEmbedUnimplementedDriverPluginServer() {}

// UnsafeDriverPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverPluginServer will
// result in compilation errors.
type UnsafeDriverPluginServer interface {
	mustEmbedUnimplementedDriverPluginServer()
}

func RegisterDriverPluginServer(s grpc.ServiceRegistrar, srv DriverPluginServer) {
	s.RegisterService(&DriverPlugin_ServiceDesc, srv)
}

func _DriverPlugin_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverplugin.DriverPlugin/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_DriverRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).DriverRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverplugin.DriverPlugin/DriverRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).DriverRegister(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_FetchDeviceMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceMetaFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).FetchDeviceMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverplugin.DriverPlugin/FetchDeviceMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).FetchDeviceMeta(ctx, req.(*DeviceMetaFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_TransformData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverPluginServer).TransformData(&driverPluginTransformDataServer{stream})
}

type DriverPlugin_TransformDataServer interface {
	Send(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type driverPluginTransformDataServer struct {
	grpc.ServerStream
}

func (x *driverPluginTransformDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverPluginTransformDataServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverPlugin_SendHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).SendHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverplugin.DriverPlugin/SendHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).SendHeartBeat(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_ExecCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverPluginServer).ExecCommands(&driverPluginExecCommandsServer{stream})
}

type DriverPlugin_ExecCommandsServer interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type driverPluginExecCommandsServer struct {
	grpc.ServerStream
}

func (x *driverPluginExecCommandsServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverPluginExecCommandsServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverPlugin_DeviceLifeControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverPluginServer).DeviceLifeControl(&driverPluginDeviceLifeControlServer{stream})
}

type DriverPlugin_DeviceLifeControlServer interface {
	Send(*DeviceLifeControlRequest) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type driverPluginDeviceLifeControlServer struct {
	grpc.ServerStream
}

func (x *driverPluginDeviceLifeControlServer) Send(m *DeviceLifeControlRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverPluginDeviceLifeControlServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverPlugin_TransformRawData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverPluginServer).TransformRawData(&driverPluginTransformRawDataServer{stream})
}

type DriverPlugin_TransformRawDataServer interface {
	Send(*Response) error
	Recv() (*ReportMessage, error)
	grpc.ServerStream
}

type driverPluginTransformRawDataServer struct {
	grpc.ServerStream
}

func (x *driverPluginTransformRawDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverPluginTransformRawDataServer) Recv() (*ReportMessage, error) {
	m := new(ReportMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverPlugin_TransformBatchRawData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverPluginServer).TransformBatchRawData(&driverPluginTransformBatchRawDataServer{stream})
}

type DriverPlugin_TransformBatchRawDataServer interface {
	Send(*Response) error
	Recv() (*ReportMessages, error)
	grpc.ServerStream
}

type driverPluginTransformBatchRawDataServer struct {
	grpc.ServerStream
}

func (x *driverPluginTransformBatchRawDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverPluginTransformBatchRawDataServer) Recv() (*ReportMessages, error) {
	m := new(ReportMessages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverPlugin_ServiceDesc is the grpc.ServiceDesc for DriverPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driverplugin.DriverPlugin",
	HandlerType: (*DriverPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _DriverPlugin_Connect_Handler,
		},
		{
			MethodName: "DriverRegister",
			Handler:    _DriverPlugin_DriverRegister_Handler,
		},
		{
			MethodName: "FetchDeviceMeta",
			Handler:    _DriverPlugin_FetchDeviceMeta_Handler,
		},
		{
			MethodName: "SendHeartBeat",
			Handler:    _DriverPlugin_SendHeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransformData",
			Handler:       _DriverPlugin_TransformData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecCommands",
			Handler:       _DriverPlugin_ExecCommands_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeviceLifeControl",
			Handler:       _DriverPlugin_DeviceLifeControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransformRawData",
			Handler:       _DriverPlugin_TransformRawData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransformBatchRawData",
			Handler:       _DriverPlugin_TransformBatchRawData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/driver.proto",
}
